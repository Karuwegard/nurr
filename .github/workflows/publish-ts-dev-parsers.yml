---
name: Publish Dev tree-sitter parsers

on:
  push:
    branches:
      - 'main'
    paths:
      - ./tree-sitter-parsers.json
      - .github/workflows/publish-ts-dev-parsers.yml
  workflow_dispatch:

  # TODO: Remove this if we need to introduce chunking
concurrency:
  group: publish-dev-tree-sitter-parsers
  cancel-in-progress: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          echo "MATRIX=$(cat ./tree-sitter-parsers.json | tr -d '\n\r')" >> $GITHUB_OUTPUT

  publish:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      max-parallel: 10 # Don't DDOS the luarocks servers
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Clone parser repository
        run: |
          REPO_URL=$(echo "${{ matrix.parsers.install_info.url }}" | sed 's/\.git$//')
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          git clone --filter=blob:none "$REPO_URL.git" .

      - name: Get latest Tag and parser name
        id: get-release
        run: |
          echo "GITHUB_SHA_OVERRIDE=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "PARSER_NAME=tree-sitter-${{ matrix.parsers.lang }}" >> $GITHUB_ENV
          # Check for semver tags
          echo "GITHUB_REPOSITORY_OVERRIDE=$(echo '${{ env.REPO_URL }}' | awk -F/ '{print $4"/"$5}')" >> $GITHUB_ENV

      - name: Install tree-sitter parser
        uses: baptiste0928/cargo-install@v3
        if: ${{ matrix.parsers.install_info.requires_generate_from_grammar == 'true' }}
        with:
          crate: tree-sitter-cli

      - name: Install Node JS
        uses: actions/setup-node@v4
        if: ${{ matrix.parsers.install_info.requires_generate_from_grammar == 'true' || matrix.parsers.install_info.generate_requires_npm == 'true' }}

      - name: Install Lua
        if: ${{ env.RELEASE_VERSION != '' }}
        uses: leso-kn/gh-actions-lua@master
        with:
          luaVersion: "5.1"

      - name: Install Luarocks
        uses: hishamhm/gh-actions-luarocks@master

      - name: Get Rockspec template
        uses: actions/checkout@v4
        with: 
          sparse-checkout: |
            resources
          path: rockspec-template

      - name: Prepare Rockspec template
        env:
          SOURCES_JSON: ${{ toJson(matrix.parsers.install_info.files) }}
        run: |
          mv rockspec-template/resources/tree-sitter-parser-rockspec.template rockspec.template
          sed -i 's/LANG/${{ matrix.parsers.lang }}/g' rockspec.template
          # Conver sources to lua
          SOURCES_TBL=$(echo "$SOURCES_JSON" | jq -r '"{ " + (map("\"" + . + "\"") | join(", ")) + " }"')
          sed -i 's@SOURCES@'"$SOURCES_TBL"'@' rockspec.template
          if [[ "${{ matrix.parsers.install_info.requires_generate_from_grammar }}" == "true" ]]; 
          then
            sed -i 's/generate_from_grammar\s=\sfalse/generate_from_grammar = true/g' rockspec.template
          fi
          if [[ "${{ matrix.parsers.install_info.generate_requires_npm }}" == "true" ]]; 
          then
            sed -i 's/generate_requires_npm\s=\sfalse/generate_requires_npm = true/g' rockspec.template
          fi
          if [[ -n "${{ matrix.parsers.install_info.location }}" ]]; 
          then
            sed -i 's@location\s=\snil@location = "${{ matrix.parsers.install_info.location }}"@g' rockspec.template
          fi
          cat rockspec.template

      - name: Install `luarocks-build-treesitter-parser` Package
        run: |
          luarocks --verbose --local --lua-version=5.1 install luarocks-build-treesitter-parser

      - name: Install askalono-cli for license detection
        uses: baptiste0928/cargo-install@v3
        with:
          crate: askalono-cli

      - name: Get SPDX license
        run: |
          LICENSE=$(askalono crawl . | sed -n 's/License: \([^ ]*\).*/\1/p')
          LICENSE_COUNT=$(echo "$LICENSE" | grep -c .)
          if [ "$LICENSE_COUNT" -eq 1 ]; then
            echo "License identified: $LICENSE"
            echo "LICENSE=$LICENSE" >> $GITHUB_ENV
          else
            if [ "$LICENSE_COUNT" -eq 0 ]; then
              echo "Error: No license identified."
            else
              echo "Error: Multiple licenses identified."
            fi
            exit 1
          fi

      - name: Publish LuaRock (TODO)
        uses: nvim-neorocks/luarocks-tag-release@v5
        env:
          LUAROCKS_API_KEY: ${{ secrets.LUAROCKS_API_KEY }}
        with:
          name: ${{ env.PARSER_NAME }}
          version: 'scm'
          summary: tree-sitter parser for ${{ matrix.parsers.lang }}
          template: "rockspec.template"
          license: ${{ env.LICENSE }}
          labels: |
            neovim
            tree-sitter
          extra_luarocks_args: |
            --namespace=neorocks
            --force


